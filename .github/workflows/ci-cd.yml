name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cms
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done

    - name: Wait for MongoDB
      run: |
        until mongo --host 127.0.0.1:27017 --eval "print('MongoDB is ready')"; do
          echo 'Waiting for MongoDB...'
          sleep 2
        done

    - name: Run Checkstyle
      run: |
        mkdir -p checkstyle
        curl -L -o checkstyle/checkstyle.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.12.1/checkstyle-10.12.1-all.jar
        java -jar checkstyle/checkstyle.jar -c /google_checks.xml src/ || true

    - name: Compile with Maven
      run: ./mvnw clean compile

    - name: Run Tests
      run: ./mvnw test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/cms
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: root
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/cms_documents

    - name: Package Application
      run: ./mvnw package -DskipTests

    - name: Build Docker Image
      run: |
        docker build -t smart-clinic-management:${{ github.sha }} .
        docker tag smart-clinic-management:${{ github.sha }} smart-clinic-management:latest

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: target/*.jar

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Smart Clinic Management'
        path: '.'
        format: 'HTML'
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: reports/

  code-quality:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
